{"ast":null,"code":"import axios from \"axios\";\nclass AuthService {\n  constructor() {\n    this.login = requestBody => {\n      return this.api.post(\"/auth/login\", requestBody);\n      // same as\n      // return axios.post(\"http://localhost:5005/auth/login\");\n    };\n    this.signup = requestBody => {\n      return this.api.post(\"/auth/signup\", requestBody);\n      // same as\n      // return axios.post(\"http://localhost:5005/auth/singup\");\n    };\n    this.verify = () => {\n      return this.api.get(\"/auth/verify\");\n      // same as\n      // return axios.post(\"http://localhost:5005/auth/verify\");\n    };\n    // Create a new instance of axios with a custom configuration\n    this.api = axios.create({\n      baseURL: process.env.REACT_APP_SERVER_URL || \"http://localhost:5005\"\n      // We set our API's base URL so that all requests use the same base URL\n    });\n\n    // Automatically set JWT token in the headers for every request\n    this.api.interceptors.request.use(config => {\n      // Retrieve the JWT token from the local storage\n      const storedToken = localStorage.getItem(\"authToken\");\n      if (storedToken) {\n        config.headers = {\n          Authorization: `Bearer ${storedToken}`\n        };\n      }\n      return config;\n    });\n  }\n}\n\n// Create one instance object\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["axios","AuthService","constructor","login","requestBody","api","post","signup","verify","get","create","baseURL","process","env","REACT_APP_SERVER_URL","interceptors","request","use","config","storedToken","localStorage","getItem","headers","Authorization","authService"],"sources":["/Users/alexandra.strang/code/house_helper_fullstack/projector-client/src/context/auth.context.js"],"sourcesContent":["import axios from \"axios\";\n\nclass AuthService {\n  constructor() {\n    // Create a new instance of axios with a custom configuration\n    this.api = axios.create({\n      baseURL: process.env.REACT_APP_SERVER_URL || \"http://localhost:5005\",\n      // We set our API's base URL so that all requests use the same base URL\n    });\n\n    // Automatically set JWT token in the headers for every request\n    this.api.interceptors.request.use((config) => {\n      // Retrieve the JWT token from the local storage\n      const storedToken = localStorage.getItem(\"authToken\");\n\n      if (storedToken) {\n        config.headers = { Authorization: `Bearer ${storedToken}` };\n      }\n\n      return config;\n    });\n  }\n\n  login = (requestBody) => {\n    return this.api.post(\"/auth/login\", requestBody);\n    // same as\n    // return axios.post(\"http://localhost:5005/auth/login\");\n  };\n\n  signup = (requestBody) => {\n    return this.api.post(\"/auth/signup\", requestBody);\n    // same as\n    // return axios.post(\"http://localhost:5005/auth/singup\");\n  };\n\n  verify = () => {\n    return this.api.get(\"/auth/verify\");\n    // same as\n    // return axios.post(\"http://localhost:5005/auth/verify\");\n  };\n}\n\n// Create one instance object\nconst authService = new AuthService();\n\nexport default authService;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,WAAW,CAAC;EAChBC,WAAWA,CAAA,EAAG;IAAA,KAoBdC,KAAK,GAAIC,WAAW,IAAK;MACvB,OAAO,IAAI,CAACC,GAAG,CAACC,IAAI,CAAC,aAAa,EAAEF,WAAW,CAAC;MAChD;MACA;IACF,CAAC;IAAA,KAEDG,MAAM,GAAIH,WAAW,IAAK;MACxB,OAAO,IAAI,CAACC,GAAG,CAACC,IAAI,CAAC,cAAc,EAAEF,WAAW,CAAC;MACjD;MACA;IACF,CAAC;IAAA,KAEDI,MAAM,GAAG,MAAM;MACb,OAAO,IAAI,CAACH,GAAG,CAACI,GAAG,CAAC,cAAc,CAAC;MACnC;MACA;IACF,CAAC;IAnCC;IACA,IAAI,CAACJ,GAAG,GAAGL,KAAK,CAACU,MAAM,CAAC;MACtBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,oBAAoB,IAAI;MAC7C;IACF,CAAC,CAAC;;IAEF;IACA,IAAI,CAACT,GAAG,CAACU,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;MAC5C;MACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MAErD,IAAIF,WAAW,EAAE;QACfD,MAAM,CAACI,OAAO,GAAG;UAAEC,aAAa,EAAG,UAASJ,WAAY;QAAE,CAAC;MAC7D;MAEA,OAAOD,MAAM;IACf,CAAC,CAAC;EACJ;AAmBF;;AAEA;AACA,MAAMM,WAAW,GAAG,IAAIvB,WAAW,CAAC,CAAC;AAErC,eAAeuB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}